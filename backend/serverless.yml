service: serverless-ws-test

provider:
  name: aws
  runtime: python3.9
  websocketsApiName: custom-websockets-api-name
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  websocketsDescription: Custom Serverless Websockets
  region: ap-southeast-1
  logs:
    websocket: true
  layers:
  - arn:aws:lambda:${self:provider.region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:26


functions:
  connect:
    handler: connect.main
    events:
      - websocket:
          route: $connect
          authorizer: 
            name: auth
            identitySource:
              - 'route.request.header.auth'
          routeResponseSelectionExpression: $default #This option allows you to respond to a websocket message using the body parameter
      - websocket:
          route: $disconnect
  default:
    handler: default.main
    events:
      - websocket:
          route: $default
          routeResponseSelectionExpression: $default #This option allows you to respond to a websocket message using the body parameter
    layers:
      - arn:aws:lambda:${self:provider.region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:26
  customFoo:
    handler: custom_foo.main
    events:
      - websocket:
          route: foo # will trigger if $request.body.action === "foo"
          routeResponseSelectionExpression: $default
  auth:
    handler: auth.main

  apiGatewayHTTPBackendRoute:
    handler: connect.main
    events:
      - httpApi:
          method: GET
          path: /{routeKey}

resources:
  Resources:
    gatewayid:
      Type: AWS::SSM::Parameter
      Properties:
        DataType: text
        Description: API Gateway Endpoint
        Name: apigatewayendpoint
        Type: String
        Value:
          Fn::GetAtt:
            - WebsocketsApi
            - ApiEndpoint

    routeintegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties: 
        ApiId: !Ref WebsocketsApi
        ConnectionType: INTERNET
        Description: "http integration"
        IntegrationMethod: GET
        IntegrationType: HTTP
        IntegrationUri:
          Fn::Join:
          - ''
          - - Fn::GetAtt:
              - HttpApi
              - ApiEndpoint
            - /{routeKey}
        RequestParameters:
          "integration.request.header.auth": "context.authorizer.key"
          "integration.request.path.routeKey": "context.routeKey"

    barRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref WebsocketsApi
        RouteKey: 'bar'
        Target: !Join
          - /
          - - integrations
            - !Ref routeintegration

    apiRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId: !Ref WebsocketsApi
        RouteKey: 'api'
        Target: !Join
          - /
          - - integrations
            - !Ref routeintegration

    CloudWatchRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Action: 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
        Path: /
        ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
    
    Account:
      Type: 'AWS::ApiGateway::Account'
      Properties:
        CloudWatchRoleArn: !GetAtt 
          - CloudWatchRole
          - Arn


package:
  patterns:
    - '!node_modules/**'
    - '!venv/**'